<?php

/**
 * Implements hook_ctools_plugin_api().
 */
function openlayers_cycle_ctools_plugin_api($module, $api) {
  if ($module == "openlayers") {
    switch ($api) {
      case 'openlayers_layers':
        return array('version' => 1);
    }
  }
}

/**
 * Implements hook_entity_info().
 */
function openlayers_cycle_entity_info() {
  $info['openlayers_cycle_story'] = array(
    'label' => t('Story'),
    'controller class' => 'EntityAPIControllerExportable',
    'metadata controller class' => FALSE,
    'entity class' => 'OpenlayersCycleStory',
    'base table' => 'openlayers_cycle_story',
    'module' => 'openlayers_cycle',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'label' => 'name',
      'name' => 'machine_name',
    ),
    'access callback' => 'openlayers_cycle_story_access',
    'admin ui' => array(
      'path' => 'admin/stories',
      'file' => 'openlayers_cycle.admin.inc',
      'controller class' => 'OpenlayersCycleStoryUIController',
      'menu wildcard' => '%openlayers_cycle_story',
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
  );

  return $info;
}

/**
 * Implements hook_entity_info_alter().
 */
function openlayers_cycle_entity_info_alter(&$entity_info) {
  $view_mode = array(
    'label' => t('Openlayers story popup'),
    'custom settings' => FALSE,
  );
  foreach ($entity_info as $entity => &$info) {
    if (isset($info['view modes']) && !empty($info['view modes'])) {
      $info['view modes']['openlayers_cycle_story_popup'] = $view_mode;
    }
  }
}

/**
 * Implements hook_entity_property_info().
 */
function openlayers_cycle_entity_property_info() {
  $info['openlayers_cycle_story']['properties'] = array(
    'id' => array(
      'label' => t('ID'),
      'type' => 'integer',
      'description' => t('The primary identifier for a story.'),
      'schema field' => 'id',
      'validation callback' => 'entity_metadata_validate_integer_positive',
    ),
    'name' => array(
      'label' => t('Name'),
      'type' => 'text',
      'description' => t('The displayed name for a story.'),
      'schema field' => 'name',
      'required' => TRUE,
    ),
    'machine_name' => array(
      'label' => t('Machine name'),
      'type' => 'token',
      'description' => t('The internally used machine name for a story.'),
      'schema field' => 'machine_name',
      'required' => TRUE,
    ),
    'queue' => array(
      'label' => t('Story queue'),
      'type' => 'text',
      'description' => t('The internally used machine name referencing an existing node queue.'),
      'schema field' => 'queue',
      'required' => TRUE,
    ),
    'description' => array(
      'label' => t('Description'),
      'type' => 'text',
      'description' => t('The displayed description of a story.'),
      'schema field' => 'description',
      'sanitize' => 'filter_xss',
    ),
    'options' => array(
    
    ),
    'enabled' => array(
      'label' => t('Enabled'),
      'type' => 'boolean',
      'description' => t('A flag indicating whether the story is enabled.'),
      'schema field' => 'enabled',
    ),
  );

  return $info;
}

function openlayers_cycle_story_access($op, $type = NULL, $account = NULL) {
  return user_access('administer content', $account);
}

/**
 * Determine if the machine name is in use.
 */
function openlayers_cycle_story_machine_name_exists($machine_name) {
  $query = 'SELECT 1 FROM {openlayers_cycle_story} WHERE machine_name = :machine_name';
  $exists = db_query_range($query, 0, 1, array(':machine_name' => $machine_name))->fetchField();
  return $exists;
}


function openlayers_cycle_story_load($name) { 
  return openlayers_cycle_get_stories($name);
}

function openlayers_cycle_get_stories($name = NULL) {
  $stories = entity_load_multiple_by_name('openlayers_cycle_story', isset($name) ? array($name) : FALSE);
  return isset($name) ? reset($stories) : $stories;
}

function openlayers_cycle_story_page_title($story) {
  return $story->name;
}

function openlayers_cycle_story_page_view($story, $view_mode = 'full') {
  $controller = entity_get_controller('openlayers_cycle_story');
  $content = $controller->view(array($story->internalIdentifier() => $story));

  return $content;
}

/**
 * Implements hook_openlayers_cycle_story_presave().
 */
function openlayers_cycle_openlayers_cycle_story_presave($story) {
  // Inserting.
  if ($story->is_new) {
    $queue = array(
      'name' => $story->machine_name,
      'title' => $story->name,
      'subqueue_title' => $story->name,
      'size' => 0,
      'link' => t('Add to @story.', array('@story' => $story->name)),
      'link_remove' => t('Remove from @story.', array('@story' => $story->name)),
      'owner' => 'nodequeue',
      'show_in_links' => (int) TRUE,
      'show_in_tab' => (int) TRUE,
      'show_in_ui' => (int) FALSE,
      'reverse' => (int) FALSE,
      'reference' => (int) FALSE,
      'i18n' => (int) FALSE,
      'types' => array(),
      'roles' => array(),
      'add_subqueue' => array(
        $story->name,
      ),
    );
    if (isset($story->options['queue'])) {
      $queue = $story->options['queue'] + $queue;
    }

    $queue = (object) $queue;
    $story->qid = nodequeue_save($queue);
    $story->queue = $story->machine_name;
  }
}

/**
 * Implements hook_openlayers_cycle_story_delete().
 */
function openlayers_cycle_openlayers_cycle_story_delete($story) {
  $queue = nodequeue_load_queue_by_name($story->queue);
  nodequeue_delete($queue->qid);
}

/**
 * Implements hook_openlayers_cycle_story_view().
 * Prepares features stored in nodequeue and passes them to the openlayers map.
 */
function openlayers_cycle_openlayers_cycle_story_view($story, $view_mode, $langcode) {
  $map = openlayers_map_load($story->options['map']);

  $queue = nodequeue_load_queue_by_name($story->queue);
  // There should never be more than one subqueue, but good to check just in
  // case.
  if ($queue->subqueues != 1) {
    // Render map anyway.
    $story->content['map']['#markup'] = openlayers_render_map($map);
    return;
  }

  // Crazy dance to get the contents of the queue.
  $sqids = nodequeue_load_subqueues_by_queue($queue->qid);
  list($sqid) = array_keys($sqids);
  // Load all the nodes.
  $nodes = nodequeue_load_nodes($sqid, FALSE, 0, FALSE);

  $features = array();
  foreach (entity_metadata_wrapper("list<node>", $nodes) as $index => $wrapper) {
    // TODO: Need to know which field on node is a geofield.
    //$geofield = $story->options['geofields'][$node->type];
    $geofield = 'field_geodata';
    $geodata = $wrapper->{$geofield}->value();

    // Skip item id geodata is empty/invalid.
    if (empty($geodata)) {
      // TODO: Report this?
      continue;
    }

    $features[$index] = array(
      'projection' => '4326',
      'wkt' => 'POINT(' . $geodata['lon'] . ' ' . $geodata['lat'] . ')',
      'attributes' => array(
        'content' => drupal_render(node_view($wrapper->value(), 'openlayers_cycle_story_popup')),
      ),
    );
  }

  if (!empty($features)) {
    // Pushing the features through to the openlayers cycle behaviour which
    // will inject them into the placeholder layer.
    $map->data['openlayers_cycle_story_features'] = $features;
  }

  $story->content['map']['#markup'] = openlayers_render_map($map);
}

/**
 * Implements hook_openlayers_behaviors().
 */
function openlayers_cycle_openlayers_behaviors() {
  return array(
    'openlayers_cycle' => array(
      'title' => t('OpenLayers cycle'),
      'description' => t(''),
      'behavior' => array(
        'path' => drupal_get_path('module', 'openlayers_cycle') .'/behaviors',
        'file' =>  'openlayers_cycle.inc',
        'class' => 'openlayers_cycle',
        'parent' => 'openlayers_behavior',
      ),
    ),
  );
}

/**
 * Implements hook_openlayers_layers().
 */
function openlayers_cycle_openlayers_layers() {
  $layer = new stdClass();

  $layer->api_version = 1;
  $layer->name = 'openlayers_cycle_story_data';
  $layer->title = t('OpenLayers Cycle story data.');
  $layer->description = t('Placeholder layer for OpenLayers Cycle story data.');

  $layer->data = array(
    'projection' => array('4326'),
    'layer_type' => 'openlayers_layer_type_raw',
    'options' => array(
      'layers' => array(),
    ),
  );

  return array($layer->name => $layer);
}
