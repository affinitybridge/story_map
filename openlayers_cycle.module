<?php

/**
 * Implements hook_menu().
 */
function openlayers_cycle_menu() {
  $items = array();

  $items['admin/config/openlayers-cycle'] = array(
    'title' => 'OpenLayers Cycle',
    'description' => 'OpenLayers Cycle global configuration.',
    'position' => 'right',
    'weight' => -20,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer site configuration'),
  );
  $items['admin/config/openlayers-cycle/manage'] = array(
    'title' => 'Manage OpenLayers Cycle configuration.',
    'description' => 'Manage active Tilestache configuration.',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('openlayers_cycle_config_manage_form'),
    'file' => 'openlayers_cycle.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function openlayers_cycle_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link to 'node/add' on 'admin/content' page.
  if ($root_path == 'admin/content/stories') {
    $item = menu_get_item('story/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/**
 * Implements hook_permission().
 */
function openlayers_cycle_permission() {
  return array(
    'view stories' => array(
      'title' => t('View stories'),
    ),
    'create stories' => array(
      'title' => t('Create stories'),
    ),
    'update stories' => array(
      'title' => t('Edit stories'),
    ),
    'delete stories' => array(
      'title' => t('Delete stories'),
    ),
  );
}

/**
 * Implements hook_ctools_plugin_api().
 */
function openlayers_cycle_ctools_plugin_api($module, $api) {
  if ($module == "openlayers") {
    switch ($api) {
      case 'openlayers_layers':
        return array('version' => 1);
    }
  }
}

/**
 * Implements hook_entity_info().
 */
function openlayers_cycle_entity_info() {
  $info['openlayers_cycle_story'] = array(
    'label' => t('Story'),
    'plural label' => t('Stories'),
    'controller class' => 'EntityAPIControllerExportable',
    'metadata controller class' => FALSE,
    'entity class' => 'OpenlayersCycleStory',
    'base table' => 'openlayers_cycle_story',
    'module' => 'openlayers_cycle',
    'bundles' => array(),
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'label' => 'name',
      'name' => 'machine_name',
    ),
    'access callback' => 'openlayers_cycle_story_access',
    'admin ui' => array(
      'path' => 'story',
      'file' => 'openlayers_cycle.admin.inc',
      'controller class' => 'OpenlayersCycleStoryUIController',
      'menu wildcard' => '%openlayers_cycle_story',
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
  );

  return $info;
}

/**
 * Implements hook_entity_info_alter().
 */
function openlayers_cycle_entity_info_alter(&$entity_info) {
  $view_mode = array(
    'label' => t('Openlayers story popup'),
    'custom settings' => FALSE,
  );
  foreach ($entity_info as $entity => &$info) {
    if (isset($info['view modes']) && !empty($info['view modes'])) {
      $info['view modes']['openlayers_cycle_story_popup'] = $view_mode;
    }
  }
}

/**
 * Implements hook_entity_property_info().
 */
function openlayers_cycle_entity_property_info() {
  $info['openlayers_cycle_story']['properties'] = array(
    'id' => array(
      'label' => t('ID'),
      'type' => 'integer',
      'description' => t('The primary identifier for a story.'),
      'schema field' => 'id',
      'validation callback' => 'entity_metadata_validate_integer_positive',
    ),
    'name' => array(
      'label' => t('Name'),
      'type' => 'text',
      'description' => t('The displayed name for a story.'),
      'schema field' => 'name',
      'required' => TRUE,
    ),
    'machine_name' => array(
      'label' => t('Machine name'),
      'type' => 'token',
      'description' => t('The internally used machine name for a story.'),
      'schema field' => 'machine_name',
      'required' => TRUE,
    ),
    'queue' => array(
      'label' => t('Story queue'),
      'type' => 'text',
      'description' => t('The internally used machine name referencing an existing node queue.'),
      'schema field' => 'queue',
      'required' => TRUE,
    ),
    'description' => array(
      'label' => t('Description'),
      'type' => 'text',
      'description' => t('The displayed description of a story.'),
      'schema field' => 'description',
      'sanitize' => 'filter_xss',
    ),
    /*
    'options' => array(
    
    ),
     */
    'enabled' => array(
      'label' => t('Enabled'),
      'type' => 'boolean',
      'description' => t('A flag indicating whether the story is enabled.'),
      'schema field' => 'enabled',
    ),
  );

  return $info;
}

/**
 * Access callback for story entity operations.
 */
function openlayers_cycle_story_access($op, $entity_info = NULL, $account = NULL) {
  switch ($op) {
    case 'view':
    case 'create':
    case 'update':
    case 'delete':
      return user_access($op . " stories", $account);

    default:
      return user_access('administer content', $account);
  }
}

/**
 * Determine if the machine name is in use.
 */
function openlayers_cycle_story_machine_name_exists($machine_name) {
  $query = 'SELECT 1 FROM {openlayers_cycle_story} WHERE machine_name = :machine_name';
  $exists = db_query_range($query, 0, 1, array(':machine_name' => $machine_name))->fetchField();
  return $exists;
}


function openlayers_cycle_story_load($name) { 
  return openlayers_cycle_get_stories($name);
}

function openlayers_cycle_get_stories($name = NULL) {
  $stories = entity_load_multiple_by_name('openlayers_cycle_story', isset($name) ? array($name) : FALSE);
  return isset($name) ? reset($stories) : $stories;
}

/**
 * Implements hook_openlayers_cycle_story_presave().
 */
function openlayers_cycle_openlayers_cycle_story_presave($story) {
  $story->refreshQueue();
}

/**
 * Implements hook_openlayers_cycle_story_delete().
 */
function openlayers_cycle_openlayers_cycle_story_delete($story) {
  nodequeue_delete($story->getQueue()->qid);
}

/**
 * Implements hook_openlayers_cycle_story_view().
 * Prepares features stored in nodequeue and passes them to the openlayers map.
 */
function openlayers_cycle_openlayers_cycle_story_view($story, $view_mode, $langcode) {
  $map = openlayers_map_load($story->options['map']);
  $nodes = $story->getQueueNodes();

  $features = array();
  foreach (entity_metadata_wrapper("list<node>", $nodes) as $index => $wrapper) {
    $geofield = openlayers_cycle_get_default_geofields($wrapper->getBundle());

    if (!isset($wrapper->{$geofield})) {
      continue;
    }

    $geodata = $wrapper->{$geofield}->value();

    // Skip item id geodata is empty/invalid.
    if (empty($geodata)) {
      // TODO: Report this?
      continue;
    }

    $features[$index] = array(
      'projection' => '4326',
      'wkt' => 'POINT(' . $geodata['lon'] . ' ' . $geodata['lat'] . ')',
      'attributes' => array(
        'content' => drupal_render(node_view($wrapper->value(), 'openlayers_cycle_story_popup')),
      ),
    );
  }

  if (!empty($features)) {
    // Pushing the features through to the openlayers cycle behaviour which
    // will inject them into the placeholder layer.
    $map->data['openlayers_cycle_story_features'] = $features;
  }

  $story->content['map']['#markup'] = openlayers_render_map($map);
}

/**
 * Implements hook_openlayers_behaviors().
 */
function openlayers_cycle_openlayers_behaviors() {
  return array(
    'openlayers_cycle' => array(
      'title' => t('OpenLayers cycle'),
      'description' => t(''),
      'behavior' => array(
        'path' => drupal_get_path('module', 'openlayers_cycle') .'/behaviors',
        'file' =>  'openlayers_cycle.inc',
        'class' => 'openlayers_cycle',
        'parent' => 'openlayers_behavior',
      ),
    ),
  );
}

/**
 * Implements hook_openlayers_layers().
 */
function openlayers_cycle_openlayers_layers() {
  $layer = new stdClass();

  $layer->api_version = 1;
  $layer->name = 'openlayers_cycle_story_data';
  $layer->title = t('OpenLayers Cycle story data.');
  $layer->description = t('Placeholder layer for OpenLayers Cycle story data.');

  $layer->data = array(
    'projection' => array('4326'),
    'layer_type' => 'openlayers_layer_type_raw',
    'options' => array(
      'layers' => array(),
    ),
  );

  return array($layer->name => $layer);
}

/**
 * Returns the default geofield to use with the specified content type.
 * Returns FALSE if the specified content type hasn't had a geofield configured.
 */
function openlayers_cycle_get_default_geofields($type = NULL) {
  $fields = &drupal_static(__FUNCTION__);

  if (!isset($fields)) {
    $fields = variable_get('openlayers_cycle_geofields', array());
  }

  if ($type) {
    return isset($fields[$type]) ? $fields[$type] : FALSE;
  }

  return $fields;
}

/**
 * Returns an array keyed by node types that have one or more geofields
 * attached. Each item is an array containing the names of the geofields 
 * attached to that node type.
 */
function openlayers_cycle_get_all_geofields() {
  $fields = array();
  foreach (field_info_fields() as $name => $info) {
    if ($info['type'] == 'geofield') {
      if (isset($info['bundles']['node'])) {
        foreach ($info['bundles']['node'] as $type) {
          $fields[$type][$name] = $name;
        }
      }
    }
  }

  return $fields;
}
